{"version":3,"file":"static/js/810.deabc9c4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/updateContact/update.module.css?4eb3","components/updateContact/UpdateContact.jsx","components/modalUpdateContact/ModalUpdateContact.jsx","webpack://react-homework-template/./src/components/contactsItem/contacts.module.css?b6a9","components/contactsItem/ContactsItem.jsx","webpack://react-homework-template/./src/components/contacts/contacts.module.css?6b98","components/contacts/Contacts.jsx","webpack://react-homework-template/./src/components/filter/filter.module.css?56b3","components/filter/Filter.jsx","webpack://react-homework-template/./src/components/loader/loader.module.css?525a","components/loader/Loader.jsx","webpack://react-homework-template/./src/components/phonebook/phonebook.module.css?eac4","components/phonebook/Phonebook.jsx","webpack://react-homework-template/./src/components/modalAddContact/modalAddContact.module.css?a0b4","components/modalAddContact/ModalAddContact.jsx","pages/contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formPhonebook\":\"update_formPhonebook__oO-Vn\",\"input\":\"update_input__Rlww8\",\"btnSubmit\":\"update_btnSubmit__VQi0h\",\"nameErrorMessage\":\"update_nameErrorMessage__HMbYh\",\"numberErrorMessage\":\"update_numberErrorMessage__zN5fa\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { Input } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\nimport { selectContacts } from 'redux/selectors';\nimport { updateContactUser } from '../../servises/contactsApi/updateContactsApi';\nimport { messageObj } from '../../helpers/settings';\nimport css from './update.module.css';\n\nconst UpdateContact = ({ id, nameValue, numberValue, closeBtn }) => {\n  const dispatch = useDispatch();\n  const dataContacts = useSelector(selectContacts);\n\n  let initialsValues = {\n    name: nameValue,\n    number: numberValue,\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().min(9).max(13).required(),\n  });\n\n  const onUpdateForm = values => {\n    const findObj = dataContacts.find(contact => contact.id === id);\n    if (findObj !== undefined) {\n      const data = {\n        id: findObj.id,\n        contact: values,\n      };\n      dispatch(updateContactUser(data));\n      values.name = '';\n      values.number = '';\n      return;\n    } else {\n      toast.error('Contact not found', messageObj);\n    }\n  };\n  return (\n    <Formik\n      initialValues={initialsValues}\n      validationSchema={schema}\n      onSubmit={onUpdateForm}\n    >\n      <Form className={css.formPhonebook}>\n        <Field\n          as={Input}\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          autoComplete=\"off\"\n          placeholder=\"Name\"\n        />\n\n        <ErrorMessage\n          className={css.nameErrorMessage}\n          component=\"div\"\n          name=\"name\"\n        />\n\n        <Field\n          as={Input}\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          autoComplete=\"off\"\n          placeholder=\"Number\"\n        />\n\n        <ErrorMessage\n          className={css.numberErrorMessage}\n          component=\"div\"\n          name=\"number\"\n        />\n\n        <Button\n          className={css.btnSubmit}\n          type=\"submit\"\n          colorScheme=\"green\"\n          onClick={closeBtn}\n        >\n          Update Contact\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default UpdateContact;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n} from '@chakra-ui/react';\nimport { RepeatIcon } from '@chakra-ui/icons';\nimport { useRef } from 'react';\nimport UpdateContact from 'components/updateContact/UpdateContact';\n\nconst ModalUpdateContact = ({ id, nameValue, numberValue }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n\n  return (\n    <>\n      <Button onClick={onOpen}>\n        <RepeatIcon color={'blue'} boxSize={6} />\n      </Button>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Update your contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <UpdateContact\n              id={id}\n              nameValue={nameValue}\n              numberValue={numberValue}\n              closeBtn={onClose}\n            />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalUpdateContact;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"contacts_contactsItem__X8-sm\",\"contactInfo\":\"contacts_contactInfo__181dI\",\"btnDelete\":\"contacts_btnDelete__a2bpd\",\"buttonsDelUp\":\"contacts_buttonsDelUp__e0hvt\"};","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { deleteContactUser } from '../../servises/contactsApi/deleteContactApi';\nimport ModalUpdateContact from 'components/modalUpdateContact/ModalUpdateContact';\nimport css from './contacts.module.css';\n\nconst ContactsItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.contactsItem}>\n      <div className={css.contactInfo}>\n        <p className={css.nameContact}>{name}</p>\n        <p className={css.numberContact}>{number}</p>\n      </div>\n      <div className={css.buttonsDelUp}>\n        <ModalUpdateContact id={id} nameValue={name} numberValue={number} />\n        <button\n          className={css.btnDelete}\n          onClick={() => dispatch(deleteContactUser(id))}\n          type=\"button\"\n        >\n          <DeleteIcon color={'red'} boxSize={6} />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default ContactsItem;\n\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"sectionList\":\"contacts_sectionList__Mn9Ty\",\"contactsList\":\"contacts_contactsList__aACQx\"};","import { useSelector } from 'react-redux';\nimport ContactsItem from 'components/contactsItem/ContactsItem';\nimport { visibleContacts } from 'redux/selectors';\nimport css from './contacts.module.css';\n\nconst Contacts = () => {\n  const contactsFilters = useSelector(visibleContacts);\n\n  return (\n    <section className={css.sectionList}>\n      <ul className={css.contactsList}>\n        {contactsFilters.map(contact => {\n          return (\n            <ContactsItem\n              key={contact.id}\n              id={contact.id}\n              name={contact.name}\n              number={contact.number}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Contacts;\n","// extracted by mini-css-extract-plugin\nexport default {\"sectionFilter\":\"filter_sectionFilter__M9Q9v\",\"filterLabel\":\"filter_filterLabel__3HlzA\",\"filterInput\":\"filter_filterInput__Hvnfk\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { Input } from '@chakra-ui/react';\nimport { selectFilter } from 'redux/selectors';\nimport { filterByName } from 'redux/filterSlice';\nimport css from './filter.module.css';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <section className={css.sectionFilter}>\n      <label className={css.filterLabel}>\n        Find contacts by Name\n        <Input\n          placeholder=\"Enter name\"\n          className={css.filterInput}\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={e => dispatch(filterByName(e.target.value))}\n        />\n      </label>\n    </section>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"loader_loader__M-FUL\"};","import { Spinner } from '@chakra-ui/react';\nimport css from './loader.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={css.loader}>\n      <Spinner color=\"blue.500\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"formPhonebook\":\"phonebook_formPhonebook__Ze-PS\",\"input\":\"phonebook_input__xQL83\",\"btnSubmit\":\"phonebook_btnSubmit__zwxW6\",\"nameErrorMessage\":\"phonebook_nameErrorMessage__R24Mr\",\"numberErrorMessage\":\"phonebook_numberErrorMessage__82ads\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Input } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\nimport { addNewContactsToDB } from 'servises/contactsApi/addContactsApi';\nimport { selectContacts } from 'redux/selectors';\nimport { messageObj } from '../../helpers/settings';\nimport css from './phonebook.module.css';\n\nconst PhoneBook = () => {\n  const dataContacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const initialsValues = {\n    name: '',\n    number: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.string().min(9).max(13).required(),\n  });\n\n  const onSubmitForm = (values, { resetForm }) => {\n    const findName = dataContacts.find(contact => contact.name === values.name);\n    if (findName !== undefined) {\n      toast.error(`${findName.name} is already in contacts`, messageObj);\n      resetForm();\n      return;\n    } else {\n      dispatch(addNewContactsToDB(values));\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialsValues}\n        validationSchema={schema}\n        onSubmit={onSubmitForm}\n      >\n        <Form className={css.formPhonebook}>\n          <Field\n            as={Input}\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            autoComplete=\"off\"\n            placeholder=\"Name\"\n          />\n\n          <ErrorMessage\n            className={css.nameErrorMessage}\n            component=\"div\"\n            name=\"name\"\n          />\n\n          <Field\n            as={Input}\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            autoComplete=\"off\"\n            placeholder=\"Number\"\n          />\n\n          <ErrorMessage\n            className={css.numberErrorMessage}\n            component=\"div\"\n            name=\"number\"\n          />\n\n          <Button className={css.btnSubmit} type=\"submit\" colorScheme=\"blue\">\n            Add Contact\n          </Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default PhoneBook;\n","// extracted by mini-css-extract-plugin\nexport default {\"btnCreateContact\":\"modalAddContact_btnCreateContact__6EYHr\"};","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n} from '@chakra-ui/react';\nimport { useRef } from 'react';\nimport PhoneBook from 'components/phonebook/Phonebook';\nimport css from './modalAddContact.module.css';\n\nconst ModalAddContact = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n\n  return (\n    <>\n      <div className={css.btnCreateContact}>\n        <Button onClick={onOpen}>Create a new contact</Button>\n      </div>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create new contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <PhoneBook />\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalAddContact;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport Contacts from '../../components/contacts';\nimport Filter from '../../components/filter';\nimport Loader from '../../components/loader';\nimport ModalAddContact from 'components/modalAddContact/ModalAddContact';\nimport { selectContacts, selectLoading, selectLoggedIn } from 'redux/selectors';\nimport { fetchContacts } from '../../servises/contactsApi/fetchContactsApi';\nimport css from '../../components/app.module.css';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectLoading);\n  const contactsFromState = useSelector(selectContacts);\n  const isLoggedin = useSelector(selectLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isLoggedin) return <Navigate to={'/login'} />;\n\n    dispatch(fetchContacts());\n  }, [dispatch, isLoggedin]);\n\n  return (\n    <div className={css.contactsPage}>\n      <h2 className={css.phoneBook}>Phonebook</h2>\n      <ModalAddContact />\n      <h2 className={css.contacts}>Contacts</h2>\n      <Filter />\n      {isLoading && <Loader />}\n      {contactsFromState.length !== 0 && <Contacts />}\n\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n      />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["id","nameValue","numberValue","closeBtn","dispatch","useDispatch","dataContacts","useSelector","selectContacts","initialsValues","name","number","schema","yup","shape","required","min","max","initialValues","validationSchema","onSubmit","values","findObj","find","contact","undefined","data","updateContactUser","toast","messageObj","className","css","as","Input","type","autoComplete","placeholder","component","colorScheme","onClick","useDisclosure","isOpen","onOpen","onClose","initialRef","useRef","finalRef","color","boxSize","initialFocusRef","finalFocusRef","pb","deleteContactUser","contactsFilters","visibleContacts","map","value","selectFilter","I","onChange","e","filterByName","target","resetForm","findName","addNewContactsToDB","isLoading","selectLoading","contactsFromState","isLoggedin","selectLoggedIn","useEffect","to","fetchContacts","length","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme"],"sourceRoot":""}